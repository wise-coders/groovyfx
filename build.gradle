//import org.javamodularity.moduleplugin.tasks.ModularJavaExec

/*
 * SPDX-License-Identifier: Apache-2.0
 *
 * Copyright 2011-2024 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
plugins {
    id 'groovy'
    id 'idea'
    id 'org.openjfx.javafxplugin'
    id 'org.asciidoctor.jvm.convert'
    id 'com.google.osdetector'
}

if (!project.hasProperty('bintrayUsername'))  project.ext.bintrayUsername  = ''
if (!project.hasProperty('bintrayApiKey'))    project.ext.bintrayApiKey    = ''
if (!project.hasProperty('sonatypeUsername')) project.ext.sonatypeUsername = ''
if (!project.hasProperty('sonatypePassword')) project.ext.sonatypePassword = ''


repositories {
    if (project.hasProperty('groovyfx_useMavenLocal') && Boolean.valueOf(project.groovyfx_useMavenLocal)) { mavenLocal() }
    mavenCentral()
}

configurations {
    jansi.extendsFrom(runtime)
    demo.extendsFrom(ast)
}

javafx {
    modules = [
       'javafx.base',
       'javafx.graphics',
       'javafx.controls',
       'javafx.fxml',
       'javafx.swing',
       'javafx.web',
       'javafx.media'
    ]
}

dependencies {
    implementation "org.apache.groovy:groovy-all:${groovyfx_groovyVersion}"
    testImplementation "junit:junit:${groovyfx_junitVersion}"
    jansi "org.fusesource.jansi:jansi:${groovyfx_jansiVersion}"
    testImplementation("org.spockframework:spock-core:${groovyfx_spockVersion}") {
        exclude group: 'org.apache.groovy', module: 'groovy-all'
    }
}


idea {
    module {
        // excludeDirs += file('gradle/') // Gradle directory including the wrapper subdirectory.
        excludeDirs += file('.settings/') // Eclipse settings directory.
        excludeDirs += file('bin') // Eclipse compilation directory.
        excludeDirs += file('out') // IDEA compilation directory.
        excludeDirs += file('build') // Gradle compilation directory.
    }
    project {
        jdkName '11'
        languageLevel '11'
        ipr {
            withXml { provider ->
                final node = provider.asNode()
                final component = provider.asNode().component
                node.component.find { it.'@name' == 'VcsDirectoryMappings' }.mapping[0].'@vcs' = 'Git'
                final gradleSettings = node.appendNode('component', [name: 'GradleSettings'])
                gradleSettings.appendNode('option', [name: 'linkedProjectPath', value: '$PROJECT_DIR$/build.gradle'])
            }
        }
    }
}

asciidoctor {
    attributes toc: 'left',
        doctype: 'book',
        icons: 'font',
        encoding: 'utf-8',
        sectlink: true,
        sectanchors: true,
        numbered: true,
        linkattrs: true,
        imagesdir: 'images',
        stylesheet: 'css/style.css',
        'source-highlighter': 'coderay',
        'groovyfx-version': project.version,
        'groovy-version': project.groovyfx_groovyVersion
}

processResources {
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
    from(sourceSets.main.resources.srcDirs) {
        filter(org.apache.tools.ant.filters.ReplaceTokens, tokens: [
            'groovyfx.version': project.version
        ])
    }
}

// ------------- compiling demo source ---------------

sourceSets {
    ast {
        compileClasspath += configurations.runtimeClasspath
    }
    main {
        compileClasspath += sourceSets.ast.output + configurations.runtimeClasspath
        runtimeClasspath += sourceSets.ast.output + configurations.runtimeClasspath
    }
    demo {
        compileClasspath += sourceSets.main.output + sourceSets.ast.output + configurations.runtimeClasspath
        runtimeClasspath += sourceSets.main.output + sourceSets.ast.output + configurations.runtimeClasspath
    }
}

task createJar(type: Jar) {
    archiveBaseName.set('groovyfx')
    from sourceSets.main.output
}

// ---------------- dynamic tasks to run demos ------------------

new File('src/demo/groovy/demo').eachFileMatch(~/.*Demo.groovy/) { file ->
    def demoClassName = file.name - '.groovy'
    task "run$demoClassName"(type: JavaExec) {
        group = "Demo"
        description = "Run the $demoClassName program"
        main = "groovyfx.demo/demo.$demoClassName"
    }
}

